<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<parent>
		<groupId>com.sap.hana.cloud.sample</groupId>
		<artifactId>personslist-repo</artifactId>
		<version>0.0.1-SNAPSHOT</version>
	</parent>

	<artifactId>personslist-repo-web</artifactId>
	<packaging>war</packaging>

	<dependencies>
		<dependency>
			<groupId>com.sap.hana.cloud.sample</groupId>
			<artifactId>personslist-repo-model-jpa</artifactId>
			<version>0.0.1-SNAPSHOT</version>
		</dependency>
		<!-- SAP HANA Cloud SDK dependencies -->
		<dependency>
			<groupId>com.sap.cloud</groupId>
			<artifactId>neo-java-web-api</artifactId>
			<version>${sap.cloud.sdk.version}</version>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>javax.servlet</groupId>
			<artifactId>javax.servlet-api</artifactId>
			<version>3.0.1</version>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>org.apache.httpcomponents</groupId>
			<artifactId>httpclient</artifactId>
			<version>4.3.5</version>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>org.apache.httpcomponents</groupId>
			<artifactId>httpcore</artifactId>
			<version>4.3.2</version>
			<scope>provided</scope>
		</dependency>		
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-api</artifactId>
			<version>1.7.2</version>
			<scope>provided</scope>
		</dependency>
		<!-- Olingo OData dependencies -->
		<dependency>
			<groupId>org.apache.olingo</groupId>
			<artifactId>olingo-odata2-api</artifactId>
			<version>1.2.0</version>
			<scope>compile</scope>
		</dependency>
		<dependency>
			<groupId>org.apache.olingo</groupId>
			<artifactId>olingo-odata2-core</artifactId>
			<version>1.2.0</version>
			<scope>compile</scope>
		</dependency>
		<dependency>
			<groupId>org.apache.olingo</groupId>
			<artifactId>olingo-odata2-jpa-processor-api</artifactId>
			<version>1.2.0</version>
			<scope>compile</scope>
		</dependency>
		<dependency>
			<groupId>org.apache.olingo</groupId>
			<artifactId>olingo-odata2-api-annotation</artifactId>
			<version>1.2.0</version>
			<scope>compile</scope>
		</dependency>
		<dependency>
			<groupId>org.apache.olingo</groupId>
			<artifactId>olingo-odata2-jpa-processor-core</artifactId>
			<version>1.2.0</version>
			<scope>runtime</scope>
		</dependency>
		<dependency>
			<groupId>org.apache.cxf</groupId>
			<artifactId>cxf-rt-frontend-jaxrs</artifactId>
			<version>2.7.5</version>
		</dependency>
	</dependencies>

	<build>
		<finalName>${project.artifactId}</finalName>
		<plugins>
			<plugin>
				<artifactId>maven-dependency-plugin</artifactId>
				<version>2.6</version>
				<executions>
					<execution>
						<id>extract-js-unit-tests-runtime</id>
						<phase>process-test-resources</phase>
						<goals>
							<goal>unpack</goal>
						</goals>
						<configuration>
							<markersDirectory>${project.build.directory}/js-tests</markersDirectory>
							<overWriteReleases>false</overWriteReleases>
							<overWriteSnapshots>false</overWriteSnapshots>
							<outputAbsoluteArtifactFilename>true</outputAbsoluteArtifactFilename>
							<artifactItems>
								<artifactItem>
									<groupId>org.jboss.arquillian.extension</groupId>
									<artifactId>arquillian-phantom-binary</artifactId>
									<version>1.9.2</version>
									<classifier>${phantomjs.os.classifier}</classifier>
								</artifactItem>
							</artifactItems>
							<outputDirectory>${project.build.directory}/js-tests/phantomjs</outputDirectory>
							<stripVersion>true</stripVersion>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>com.github.searls</groupId>
				<artifactId>jasmine-maven-plugin</artifactId>
				<version>1.3.1.4</version>
				<executions>
					<execution>
						<goals>
							<goal>test</goal>
						</goals>
					</execution>
				</executions>
				<configuration>
					<!-- Where is your productive JavaScript code -->
					<jsSrcDir>${basedir}/src/main/webapp/personslist-web</jsSrcDir>
					<!-- Where are your test.js files -->
					<jsTestSrcDir>${basedir}/src/test/js</jsTestSrcDir>
					<!-- Use PhantomJS to access the Test.html, assuming it is available on your PATH -->
					<webDriverClassName>org.openqa.selenium.phantomjs.PhantomJSDriver</webDriverClassName>
					<webDriverCapabilities>
						<capability>
							<name>phantomjs.binary.path</name>
							<value>${phantomjs.path}</value>
						</capability>
						<capability>
							<name>phantomjs.cli.args</name>
							<list>
								<value>--proxy=${proxy.host}:${proxy.port}</value>
							</list>
						</capability>
					</webDriverCapabilities>
					<!-- Create a report in surefire format to be read by jenkins -->
					<junitXmlReportFileName>../surefire/TEST-${project.name}.jasmine.xml</junitXmlReportFileName>
					<!-- Execute tests automatically every 60 seconds -->
					<autoRefreshInterval>60</autoRefreshInterval>
					<!-- Use a custom template to generate the Test.html. This includes UI5 bootstrapping -->
					<customRunnerTemplate>${basedir}/src/test/resources/Test.html.template</customRunnerTemplate>
				</configuration>
			</plugin>
		</plugins>

		<pluginManagement>
			<plugins>
				<!--This plugin's configuration is used to store Eclipse m2e settings only. It has no influence on the Maven build itself. -->
				<plugin>
					<groupId>org.eclipse.m2e</groupId>
					<artifactId>lifecycle-mapping</artifactId>
					<version>1.0.0</version>
					<configuration>
						<lifecycleMappingMetadata>
							<pluginExecutions>
								<pluginExecution>
									<pluginExecutionFilter>
										<groupId>org.apache.maven.plugins</groupId>
										<artifactId>maven-dependency-plugin</artifactId>
										<versionRange>[2.6,)</versionRange>
										<goals>
											<goal>unpack</goal>
										</goals>
									</pluginExecutionFilter>
									<action>
										<execute>
											<runOnIncremental>false</runOnIncremental>
										</execute>
									</action>
								</pluginExecution>
							</pluginExecutions>
						</lifecycleMappingMetadata>
					</configuration>
				</plugin>
			</plugins>
		</pluginManagement>
	</build>

	<profiles>
		<!-- Choose correct command line scripts for interaction with SAP HANA Cloud based on detected operating system -->
		<profile>
			<id>unix-scripts</id>
			<activation>
				<os>
					<family>Unix</family>
				</os>
			</activation>
			<properties>
				<sap.cloud.console.shell>sh</sap.cloud.console.shell>
				<sap.cloud.console.script>neo.sh</sap.cloud.console.script>
			</properties>
		</profile>
		<profile>
			<id>windows-scripts</id>
			<activation>
				<os>
					<family>Windows</family>
				</os>
			</activation>
			<properties>
				<sap.cloud.console.shell>cmd</sap.cloud.console.shell>
				<sap.cloud.console.script>/c neo.bat</sap.cloud.console.script>
			</properties>
		</profile>
		<!-- Set OS-type variable used for installing phantomjs binary -->
		<profile>
			<id>linux</id>
			<activation>
				<os>
					<family>unix</family>
				</os>
				<activeByDefault>false</activeByDefault>
			</activation>
			<properties>
				<phantomjs.os.classifier>linux-64</phantomjs.os.classifier>
				<phantomjs.path>${project.build.directory}/js-tests/phantomjs/bin/phantomjs</phantomjs.path>
			</properties>
			<!-- Set the executable bit for the phantomjs.sh -->
			<build>
				<plugins>
					<plugin>
						<artifactId>maven-antrun-plugin</artifactId>
						<version>1.7</version>
						<executions>
							<execution>
								<id>make-phantomjs-executable</id>
								<phase>process-test-classes</phase>
								<goals>
									<goal>run</goal>
								</goals>
								<configuration>
									<target>
										<chmod file="${phantomjs.path}" perm="ugo+rx" />
									</target>
								</configuration>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>
		<profile>
			<id>mac</id>
			<activation>
				<os>
					<family>mac</family>
				</os>
				<activeByDefault>false</activeByDefault>
			</activation>
			<properties>
				<phantomjs.os.classifier>macosx</phantomjs.os.classifier>
				<phantomjs.path>${project.build.directory}/js-tests/phantomjs/bin/phantomjs</phantomjs.path>
			</properties>
		</profile>
		<profile>
			<id>windows</id>
			<activation>
				<os>
					<family>windows</family>
				</os>
				<activeByDefault>false</activeByDefault>
			</activation>
			<properties>
				<phantomjs.os.classifier>windows</phantomjs.os.classifier>
				<phantomjs.path>${project.build.directory}/js-tests/phantomjs/phantomjs.exe</phantomjs.path>
			</properties>
		</profile>
	</profiles>

</project>
